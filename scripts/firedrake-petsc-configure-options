#!/usr/bin/env python3

import fnmatch
import pathlib
import subprocess


DEFAULT_CONFIGURE_OPTIONS = (
    "PETSC_ARCH=firedrake",
    "--with-c2html=0",
    "--with-debugging=0",
    "--with-fortran-bindings=0",
    "--with-shared-libraries=1",
    "--with-strict-petscerrorcode",
    "--COPTFLAGS=-O3 -march=native -mtune=native",
    "--CXXOPTFLAGS=-O3 -march=native -mtune=native",
    "--FOPTFLAGS=-O3 -march=native -mtune=native",
)

EXTERNAL_PACKAGES = (
    "fftw",
    "hdf5",
    "hwloc",
    "hypre",
    "metis",
    "mumps",
    "netcdf",
    "pastix",
    "pnetcdf",
    "ptscotch",
    "scalapack",
    "suitesparse",
    "superlu_dist",
    "zlib",
)

# NOTE: Only for amd64 architecture
APT_INSTALLED_EXTERNAL_PACKAGES = {
    "fftw": None,
    "hdf5": ("/usr/include/hdf5/openmpi", "/usr/lib/x86_64-linux-gnu/hdf5/openmpi/libhdf5.a"),
    "hwloc": None,
    "hypre": ("/usr/include/hypre", "/usr/lib/x86_64-linux-gnu/libHYPRE.a"),
    "zlib": None,
}


package_manager = "apt"

configure_options = list(DEFAULT_CONFIGURE_OPTIONS)

if package_manager == "apt":
    for external_package in EXTERNAL_PACKAGES:
        if external_package in APT_INSTALLED_EXTERNAL_PACKAGES:
            package_spec = APT_INSTALLED_EXTERNAL_PACKAGES[external_package]
            if package_spec is None:
                # PETSc will find the package for us
                configure_options.append(f"--with-{external_package}")
            else:
                # Have to provide paths for headers and libraries
                (include_dir, lib) = package_spec
                configure_options.append(f"--with-{external_package}-include={include_dir}")
                configure_options.append(f"--with-{external_package}-lib={lib}")
        else:
            # Package not provided by package manager, download it instead
            configure_options.append(f"--download-{external_package}")

elif package_manager == "homebrew":
    raise NotImplementedError("TODO")
else:
    assert package_manager is None
    for external_package in EXTERNAL_PACKAGES:
        configure_options.append(f"--download-{external_package}")

print(" ".join(configure_options), end="")
