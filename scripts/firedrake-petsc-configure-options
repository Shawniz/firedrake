#!/usr/bin/env python3

import enum
import platform
import subprocess
from typing import Optional


class PackageManager(enum.Enum):
    LINUX_APT_X86_64 = enum.auto()
    LINUX_APT_AARCH64 = enum.auto()
    MACOS_HOMEBREW_ARM64 = enum.auto()


LINUX_APT_X86_64 = PackageManager.LINUX_APT_X86_64
LINUX_APT_AARCH64 = PackageManager.LINUX_APT_AARCH64
MACOS_HOMEBREW_ARM64 = PackageManager.MACOS_HOMEBREW_ARM64


def sniff_package_manager() -> Optional[PackageManager]:
    if platform.system() == "Linux":
        if has_apt():
            if platform.machine() == "x86_64":
                return LINUX_APT_X86_64
            elif platform.machine() == "aarch64":
                return LINUX_APT_AARCH64
    elif platform.system() == "Darwin":
        if has_homebrew():
            if platform.machine() == "arm64":
                return MACOS_HOMEBREW_ARM64
    return None


def has_apt() -> bool:
    try:
        subprocess.run(["apt", "--version"], capture_output=True)
        return True
    except FileNotFoundError:
        return False


def has_homebrew() -> bool:
    try:
        subprocess.run(["brew", "--version"], capture_output=True)
        return True
    except FileNotFoundError:
        return False


DEFAULT_CONFIGURE_OPTIONS = (
    "PETSC_ARCH=firedrake",
    "--with-c2html=0",
    "--with-debugging=0",
    "--with-fortran-bindings=0",
    "--with-shared-libraries=1",
    "--with-strict-petscerrorcode",
    "--COPTFLAGS=-O3 -march=native -mtune=native",
    "--CXXOPTFLAGS=-O3 -march=native -mtune=native",
    "--FOPTFLAGS=-O3 -march=native -mtune=native",
)

PETSC_AUTODETECT = 333
"""Placeholder value to use when we want PETSc to autodetect the package."""

PETSC_DOWNLOAD = 666
"""Placeholder value to use when we want PETSc to download the package."""

EXTERNAL_PACKAGES = {
    "fftw": {
        LINUX_APT_X86_64: PETSC_AUTODETECT,
        LINUX_APT_AARCH64: PETSC_AUTODETECT,
    },
    "hdf5": {
        LINUX_APT_X86_64: (
            "/usr/include/hdf5/openmpi", ["/usr/lib/x86_64-linux-gnu/hdf5/openmpi/libhdf5.a"]
        ),
        LINUX_APT_AARCH64: (
            "/usr/include/hdf5/openmpi", ["/usr/lib/aarch64-linux-gnu/hdf5/openmpi/libhdf5.a"]
        ),
    },
    "hwloc": {
        LINUX_APT_X86_64: PETSC_AUTODETECT,
        LINUX_APT_AARCH64: PETSC_AUTODETECT,
    },
    "hypre": {  # apt-installed hypre is too old
        LINUX_APT_X86_64: PETSC_DOWNLOAD,
        LINUX_APT_AARCH64: PETSC_DOWNLOAD,
    },
    "metis": {
        LINUX_APT_X86_64: PETSC_DOWNLOAD,
        LINUX_APT_AARCH64: PETSC_DOWNLOAD,
    },
    "mumps": {
        LINUX_APT_X86_64: PETSC_DOWNLOAD,
        LINUX_APT_AARCH64: PETSC_DOWNLOAD,
    },
    "netcdf": {
        LINUX_APT_X86_64: PETSC_DOWNLOAD,
        LINUX_APT_AARCH64: PETSC_DOWNLOAD,
    },
    "pastix": {
        LINUX_APT_X86_64: PETSC_DOWNLOAD,
        LINUX_APT_AARCH64: PETSC_DOWNLOAD,
    },
    "pnetcdf": {
        LINUX_APT_X86_64: PETSC_DOWNLOAD,
        LINUX_APT_AARCH64: PETSC_DOWNLOAD,
    },
    "ptscotch": {
        LINUX_APT_X86_64: PETSC_DOWNLOAD,
        LINUX_APT_AARCH64: PETSC_DOWNLOAD,
    },
    "scalapack": {
        LINUX_APT_X86_64: PETSC_DOWNLOAD,
        LINUX_APT_AARCH64: PETSC_DOWNLOAD,
    },
    "suitesparse": {
        LINUX_APT_X86_64: PETSC_DOWNLOAD,
        LINUX_APT_AARCH64: PETSC_DOWNLOAD,
    },
    "superlu_dist": {
        LINUX_APT_X86_64: PETSC_DOWNLOAD,
        LINUX_APT_AARCH64: PETSC_DOWNLOAD,
    },
    "zlib": {
        LINUX_APT_X86_64: PETSC_AUTODETECT,
        LINUX_APT_AARCH64: PETSC_AUTODETECT,
    },
}


# def main():

package_manager = sniff_package_manager()

configure_options = list(DEFAULT_CONFIGURE_OPTIONS)

for external_package, package_specs in EXTERNAL_PACKAGES.items():
    package_spec = package_specs[package_manager]

    if package_spec == PETSC_AUTODETECT:
        # PETSc will find the package for us
        configure_options.append(f"--with-{external_package}")
    elif package_spec == PETSC_DOWNLOAD:
        # Package not provided by package manager, download it instead
        configure_options.append(f"--download-{external_package}")
    else:
        # Package is installed but not findable, have to provide paths
        # to headers and libraries
        (include_dir, libs) = package_spec
        configure_options.append(f"--with-{external_package}-include={include_dir}")
        configure_options.append(f"--with-{external_package}-lib={','.join(libs)}")

print(" ".join(configure_options), end="")
