#!/usr/bin/env python3

"""Script for preparing an environment to install Firedrake into."""

# To avoid the pitfalls inherent in having executable configuration files
# this script is intentionally extremely dumb. All configure options are computed
# 'statically' (at import) and the only run-time logic that happens is dispatching
# on the right package manager and arch.

# As a matter of policy, new package managers and archs should only be added to
# this file if they are *tested in CI*.

import argparse
import enum
import platform
import subprocess
from collections.abc import Sequence
from typing import Optional


class PackageManager(enum.Enum):
    LINUX_APT_X86_64 = "apt-x86_64"
    LINUX_APT_AARCH64 = "apt-aarch64"
    MACOS_HOMEBREW_ARM64 = "brew-arm64"


LINUX_APT_X86_64 = PackageManager.LINUX_APT_X86_64
LINUX_APT_AARCH64 = PackageManager.LINUX_APT_AARCH64
MACOS_HOMEBREW_ARM64 = PackageManager.MACOS_HOMEBREW_ARM64


class FiredrakeArch(enum.Enum):
    DEFAULT = "default"
    COMPLEX = "complex"


ARCH_DEFAULT = FiredrakeArch.DEFAULT
ARCH_COMPLEX = FiredrakeArch.COMPLEX


def main():
    parser = argparse.ArgumentParser()
    package_manager_group = parser.add_mutually_exclusive_group()
    package_manager_group.add_argument(
        "--package-manager",
        choices=[pm.value for pm in PackageManager],
        required=False,
        help="TODO",
    )
    package_manager_group.add_argument(
        "--no-package-manager",
        action="store_true",
        required=False,
        help="TODO",
    )
    parser.add_argument(
        "--arch",
        choices=[arch.value for arch in FiredrakeArch],
        default=ARCH_DEFAULT,
        help="TODO",
    )
    cmd_group = parser.add_mutually_exclusive_group(required=True)
    cmd_group.add_argument(
        "--show-system-dependencies",
        "--sysdeps",  # alias
        action="store_true",
        help="TODO",
    )
    cmd_group.add_argument(
        "--show-petsc-configure-options",
        "--petscconf",  # alias
        action="store_true",
        help="TODO",
    )

    args = parser.parse_args()
    if args.package_manager is not None:
        assert not args.no_package_manager
        package_manager = PackageManager(args.package_manager)
    elif args.no_package_manager:
        package_manager = None
    else:
        package_manager = sniff_package_manager()
    arch = FiredrakeArch(args.arch)

    if args.show_system_dependencies:
        if package_manager is None:
            raise RuntimeError(
                "Cannot identify a package manager, please install Firedrake "
                "dependencies manually"
            )
        print(" ".join(SYSTEM_PACKAGES[package_manager, arch]), end="")
    else:
        assert args.show_petsc_configure_options
        print(" ".join(PETSC_CONFIGURE_OPTIONS[package_manager, arch]), end="")


def sniff_package_manager() -> Optional[PackageManager]:
    if platform.system() == "Linux":
        if has_apt():
            if platform.machine() == "x86_64":
                return LINUX_APT_X86_64
            elif platform.machine() == "aarch64":
                return LINUX_APT_AARCH64
    elif platform.system() == "Darwin":
        if has_homebrew():
            if platform.machine() == "arm64":
                return MACOS_HOMEBREW_ARM64
    return None


def has_apt() -> bool:
    try:
        subprocess.run(["apt", "--version"], capture_output=True)
        return True
    except FileNotFoundError:
        return False
    except:  # noqa: E722
        raise RuntimeError("Unexpected error occurred searching for apt")


def has_homebrew() -> bool:
    try:
        subprocess.run(["brew", "--version"], capture_output=True)
        return True
    except FileNotFoundError:
        return False
    except:  # noqa: E722
        raise RuntimeError("Unexpected error occurred searching for homebrew")


COMMON_LINUX_APT_PACKAGES = (
    "bison",
    "build-essential",
    "cmake",
    "flex",
    "git",
    "libfftw3-dev",
    "libfftw3-mpi-dev",
    "libhwloc-dev",
    "libhdf5-mpi-dev",
    "libopenblas-dev",
    "libopenmpi-dev",
    "ninja-build",
    "pkg-config",
    "python3-dev",
    "python3-pip",
)

COMMON_MACOS_HOMEBREW_PACKAGES = (
    "autoconf",
    "automake",
    "boost",
    "gcc",
    "hdf5-mpi",
    "hwloc",
    "libtool",
    "make",
    "pkg-config",
    "cmake",
    "ninja",
    "openblas",
    "openmpi",
    "python",
    "python-setuptools"
)

SYSTEM_PACKAGES = {
    (LINUX_APT_X86_64, ARCH_DEFAULT): COMMON_LINUX_APT_PACKAGES,
    (LINUX_APT_X86_64, ARCH_COMPLEX): COMMON_LINUX_APT_PACKAGES,
    (LINUX_APT_AARCH64, ARCH_DEFAULT): COMMON_LINUX_APT_PACKAGES,
    (LINUX_APT_AARCH64, ARCH_COMPLEX): COMMON_LINUX_APT_PACKAGES,
    (MACOS_HOMEBREW_ARM64, ARCH_DEFAULT): COMMON_MACOS_HOMEBREW_PACKAGES,
    (MACOS_HOMEBREW_ARM64, ARCH_COMPLEX): COMMON_MACOS_HOMEBREW_PACKAGES,
}

COMMON_PETSC_CONFIGURE_OPTIONS = (
    "--with-c2html=0",
    "--with-debugging=0",
    "--with-fortran-bindings=0",
    "--with-shared-libraries=1",
    "--with-strict-petscerrorcode",
    "--COPTFLAGS=-O3 -march=native -mtune=native",
    "--CXXOPTFLAGS=-O3 -march=native -mtune=native",
    "--FOPTFLAGS=-O3 -march=native -mtune=native",
)

# Placeholder value to use when we want PETSc to autodetect the package
PETSC_AUTODETECT = 333

# Placeholder value to use when we want PETSc to download the package
PETSC_DOWNLOAD = 666

PETSC_EXTERNAL_PACKAGE_SPECS = {
    "bison": {
        LINUX_APT_X86_64: PETSC_AUTODETECT,
        LINUX_APT_AARCH64: PETSC_AUTODETECT,
        MACOS_HOMEBREW_ARM64: PETSC_DOWNLOAD,
    },
    "fftw": {
        LINUX_APT_X86_64: PETSC_AUTODETECT,
        LINUX_APT_AARCH64: PETSC_AUTODETECT,
        MACOS_HOMEBREW_ARM64: PETSC_DOWNLOAD,
    },
    "hdf5": {
        LINUX_APT_X86_64: (
            "/usr/include/hdf5/openmpi", ["/usr/lib/x86_64-linux-gnu/hdf5/openmpi/libhdf5.a"]
        ),
        LINUX_APT_AARCH64: (
            "/usr/include/hdf5/openmpi", ["/usr/lib/aarch64-linux-gnu/hdf5/openmpi/libhdf5.a"]
        ),
        MACOS_HOMEBREW_ARM64: "/opt/homebrew",
    },
    "hwloc": {
        LINUX_APT_X86_64: PETSC_AUTODETECT,
        LINUX_APT_AARCH64: PETSC_AUTODETECT,
        MACOS_HOMEBREW_ARM64: "/opt/homebrew",
    },
    "hypre": {
        LINUX_APT_X86_64: PETSC_DOWNLOAD,
        LINUX_APT_AARCH64: PETSC_DOWNLOAD,
        MACOS_HOMEBREW_ARM64: PETSC_DOWNLOAD,
    },
    "metis": {
        LINUX_APT_X86_64: PETSC_DOWNLOAD,
        LINUX_APT_AARCH64: PETSC_DOWNLOAD,
        MACOS_HOMEBREW_ARM64: PETSC_DOWNLOAD,
    },
    "mumps": {
        LINUX_APT_X86_64: PETSC_DOWNLOAD,
        LINUX_APT_AARCH64: PETSC_DOWNLOAD,
        MACOS_HOMEBREW_ARM64: PETSC_DOWNLOAD,
    },
    "netcdf": {
        LINUX_APT_X86_64: PETSC_DOWNLOAD,
        LINUX_APT_AARCH64: PETSC_DOWNLOAD,
        MACOS_HOMEBREW_ARM64: PETSC_DOWNLOAD,
    },
    "pastix": {
        LINUX_APT_X86_64: PETSC_DOWNLOAD,
        LINUX_APT_AARCH64: PETSC_DOWNLOAD,
        MACOS_HOMEBREW_ARM64: PETSC_DOWNLOAD,
    },
    "pnetcdf": {
        LINUX_APT_X86_64: PETSC_DOWNLOAD,
        LINUX_APT_AARCH64: PETSC_DOWNLOAD,
        MACOS_HOMEBREW_ARM64: PETSC_DOWNLOAD,
    },
    "ptscotch": {
        LINUX_APT_X86_64: PETSC_DOWNLOAD,
        LINUX_APT_AARCH64: PETSC_DOWNLOAD,
        MACOS_HOMEBREW_ARM64: PETSC_DOWNLOAD,
    },
    "scalapack": {
        LINUX_APT_X86_64: PETSC_DOWNLOAD,
        LINUX_APT_AARCH64: PETSC_DOWNLOAD,
        MACOS_HOMEBREW_ARM64: PETSC_DOWNLOAD,
    },
    "suitesparse": {
        LINUX_APT_X86_64: PETSC_DOWNLOAD,
        LINUX_APT_AARCH64: PETSC_DOWNLOAD,
        MACOS_HOMEBREW_ARM64: PETSC_DOWNLOAD,
    },
    "superlu_dist": {
        LINUX_APT_X86_64: PETSC_DOWNLOAD,
        LINUX_APT_AARCH64: PETSC_DOWNLOAD,
        MACOS_HOMEBREW_ARM64: PETSC_DOWNLOAD,
    },
    "zlib": {
        LINUX_APT_X86_64: PETSC_AUTODETECT,
        LINUX_APT_AARCH64: PETSC_AUTODETECT,
        MACOS_HOMEBREW_ARM64: PETSC_AUTODETECT,
    },
}

COMMON_PETSC_EXTERNAL_PACKAGES = (
    "bison",
    "fftw",
    "hdf5",
    "hwloc",
    "metis",
    "mumps",
    "netcdf",
    "pastix",
    "pnetcdf",
    "ptscotch",
    "scalapack",
    "suitesparse",
    "superlu_dist",
    "zlib",
)


def prepare_external_package_configure_options(
    external_packages: Sequence[str],
    package_manager: Optional[PackageManager],
) -> tuple[str, ...]:
    configure_options = []
    for external_package in external_packages:
        if package_manager is None:
            # Don't know anything about the system, download everything
            package_spec = PETSC_DOWNLOAD
        else:
            package_spec = PETSC_EXTERNAL_PACKAGE_SPECS[external_package][package_manager]

        if package_spec == PETSC_AUTODETECT:
            # PETSc will find the package for us
            configure_options.append(f"--with-{external_package}")
        elif package_spec == PETSC_DOWNLOAD:
            # Package not provided by package manager, download it instead
            configure_options.append(f"--download-{external_package}")
        elif isinstance(package_spec, str):
            # Package is installed in a 'sensible' way to <prefix>/include and
            # <prefix>/lib but PETSc does not know <prefix> so we have to provide it
            configure_options.append(f"--with-{external_package}-dir={package_spec}")
        else:
            # Package is installed but not findable, have to provide paths
            # to headers and libraries
            (include_dir, libs) = package_spec
            configure_options.append(f"--with-{external_package}-include={include_dir}")
            configure_options.append(f"--with-{external_package}-lib={','.join(libs)}")
    return tuple(configure_options)


def prepare_configure_options(
    package_manager: Optional[PackageManager],
    arch: FiredrakeArch,
) -> tuple[str, ...]:
    configure_options = list(COMMON_PETSC_CONFIGURE_OPTIONS)
    configure_options.append(f"PETSC_ARCH=arch-firedrake-{arch.value}")

    if arch == ARCH_COMPLEX:
        configure_options.append("--with-scalar-type=complex")

    external_packages = list(COMMON_PETSC_EXTERNAL_PACKAGES)
    if arch != ARCH_COMPLEX:
        external_packages.append("hypre")
    configure_options.extend(
        prepare_external_package_configure_options(external_packages, package_manager)
    )
    return tuple(configure_options)


PETSC_CONFIGURE_OPTIONS = {
    (package_manager, arch): prepare_configure_options(package_manager, arch)
    for (package_manager, arch) in (
        (LINUX_APT_X86_64, ARCH_DEFAULT),
        (LINUX_APT_X86_64, ARCH_COMPLEX),
        (LINUX_APT_AARCH64, ARCH_DEFAULT),
        (LINUX_APT_AARCH64, ARCH_COMPLEX),
        (MACOS_HOMEBREW_ARM64, ARCH_DEFAULT),
        (MACOS_HOMEBREW_ARM64, ARCH_COMPLEX),
        (None, ARCH_DEFAULT),
        (None, ARCH_COMPLEX),
    )
}


if __name__ == "__main__":
    main()
