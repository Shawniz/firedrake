# Dockerfile for a plain Firedrake suitable for testing Firedrake components and applications
# Firedrake is installed as a system package so doesn't require activating a venv when the container is launched
#
# There are two command line arguments:
# ARCH:
#     The `--arch` argument to firedrake-configure, e.g. default, complex
# BRANCH:
#     The Firedrake branch to install from. The `firedrake-configure` script from this branch will be used.
#     - If BRANCH == "release": installs the latest firedrake release and the corresponding PETSc release.
#     - If BRANCH != "release": installs that Firedrake branch and the latest PETSc master branch.
#
# Example usage:
#  $ docker build \
#     --file=Dockerfile.vanilla \
#     --tag=firedrake:mybranch-complex \
#     --build-arg ARCH=complex \
#     --build-arg BRANCH=mybranch
#
#  $ docker run --rm firedrake:mybranch-complex bash -c "cd /opt/firedrake; git status"
#  On branch mybranch
#  Your branch is up to date with 'origin/JHopeCollins/merge-release'
#
#  $ docker run --rm firedrake:mybranch-complex pip list | grep "firedrake "
#  firedrake                 2025.5.0.dev0 /opt/firedrake

FROM ubuntu:latest

# Firedrake arch to build
ARG ARCH="default"
ARG BRANCH="release"

# Set '-o pipefail' to avoid linter error (https://github.com/hadolint/hadolint/wiki/DL4006)
SHELL ["/bin/bash", "-o", "pipefail", "-c"]

# Use a more sane locale
ENV LC_ALL=C.UTF-8

# Avoid tzdata prompt
# (https://stackoverflow.com/questions/61388002/how-to-avoid-question-during-the-docker-build)
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=Europe/London

# Install 'parallel' because it is needed by 'firedrake-run-split-tests'
RUN apt-get update \
    && apt-get -y install curl parallel python3 python3-pip python3-venv sudo \
    && rm -rf /var/lib/apt/lists/*

# Allow pip to install into system package locations without prompting
ENV PIP_BREAK_SYSTEM_PACKAGES=1
ENV OMP_NUM_THREADS=1 OPENBLAS_NUM_THREADS=1

# Download firedrake-configure
RUN curl -O --output-dir /opt https://raw.githubusercontent.com/firedrakeproject/firedrake/${BRANCH}/scripts/firedrake-configure

# Install system dependencies
RUN apt-get update \
    && apt-get -y install \
        $(python3 /opt/firedrake-configure --arch $ARCH --show-system-packages) \
    && rm -rf /var/lib/apt/lists/*

# OpenMPI will complain if mpiexec is invoked as root unless these are set
ENV OMPI_ALLOW_RUN_AS_ROOT=1 OMPI_ALLOW_RUN_AS_ROOT_CONFIRM=1

# Install PETSc. We set the compiler optimisation flags manually here to
# remove the default of '-march=native -mtune=native' which is not suitable for Docker images.
# Clone the release tag of PETSc if we're installing a Firedrake release.
RUN if [ "${BRANCH}" = "release" ]; then \
        CLONE_ARGS="--branch $(python3 /opt/firedrake-configure --show-petsc-version)"; \
    fi; \
    git clone --depth 1 ${CLONE_ARGS} https://gitlab.com/petsc/petsc.git /opt/petsc \
    && cd /opt/petsc \
    && python3 /opt/firedrake-configure --arch $ARCH --show-petsc-configure-options | \
        sed "s/-march=native -mtune=native/-mtune=generic/g" | \
        xargs -L1 ./configure --with-make-np=24 --download-slepc \
    && make \
    && make check \
    && rm -rf ./**/externalpackages \
    && rm -rf ./src/docs \
    && rm -f ./src/**/tutorials/output/* \
    && rm -f ./src/**/tests/output/* \
    && cd - || exit

ENV PETSC_DIR=/opt/petsc PETSC_ARCH=arch-firedrake-$ARCH
ENV PATH="$PETSC_DIR/$PETSC_ARCH/bin:$PATH"

ENV HDF5_MPI=ON
ENV CC=mpicc CXX=mpicxx
ENV CFLAGS="-mtune=generic" CPPFLAGS="-mtune=generic"
ENV MPICC=$CC

# Install Firedrake
RUN if [ ${BRANCH} = "release" ]; then \
        FIREDRAKE_SRC=git+https://github.com/firedrakeproject/firedrake.git@release#egg=firedrake \
        && PIP_ARGS="--src /opt"; \
    else \
        git clone --single-branch --branch ${BRANCH} \
            https://github.com/firedrakeproject/firedrake.git /opt/firedrake \
        && pip cache remove petsc4py \
        && pip cache remove slepc4py \
        && pip install --verbose ${PETSC_DIR}/src/binding/petsc4py \
        && pip install --verbose -r /opt/firedrake/requirements-build.txt \
        && FIREDRAKE_SRC=/opt/firedrake \
        && PIP_ARGS="--no-build-isolation"; \
    fi; \
    pip install --verbose --no-binary h5py ${PIP_ARGS} --src /opt \
        --editable ${FIREDRAKE_SRC}[docker]

RUN cd /opt/firedrake/ \
    && make check
